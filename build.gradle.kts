import java.nio.file.Path

plugins {
    alias(libs.plugins.jarTest) apply false
    alias(libs.plugins.docker) apply false
    alias(libs.plugins.shadow) apply false
    alias(libs.plugins.git)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)

    idea
    application
    checkstyle
    pmd
}

group = "au.com.rainmore"
version = "1.0.0"
description = "A demo for the usage spring, mongo and graphql"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

tasks.named<Wrapper>("wrapper") {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = project.properties["gradleVersion"] as String
}

application {
    mainClass.set(listOf(project.group.toString(), project.name, "Application").joinToString("."))
}

configurations.all {
    exclude("org.apache.logging.log4j:*")
}

val configDir: Path by extra(projectDir.toPath().resolve("project"))

apply(from = configDir.resolve("assemble.gradle").toString())
apply(from = configDir.resolve("spring.gradle").toString())


dependencies {
    annotationProcessor(libs.querdsl.apt) { artifact {classifier = "general"} }
    annotationProcessor(libs.javax.persistence.api)
    annotationProcessor(libs.javax.annotation.api)

    implementation(libs.javax.inject)

    // query dsl
    implementation(libs.querdsl.jpa)
    implementation(libs.querdsl.mongodb)
    implementation(libs.jetbrains.annotations)

    // The `javax.annotation-api` dependency is (re)declared here as `compileOnly`
    // to allow for annotations that are used in the code generated by QueryDSL.
    compileOnly(libs.javax.annotation.api)

    // Jackson
    implementation(libs.bundles.mongodb)
    implementation(libs.bundles.jackson.mongodb)

    implementation(libs.bundles.logging.java)

    implementation(libs.bundles.graphql)

    testImplementation(libs.bundles.junit.jupiter)
    testImplementation(libs.jfairy)
}

tasks.test {
    useJUnitPlatform()
    reports.html.required.set(true)
    testLogging.showStandardStreams = true
}
